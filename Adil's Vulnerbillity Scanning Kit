import requests
import socket
import ssl
import random
import threading
import logging
from urllib.parse import urljoin

# Set up logging
logging.basicConfig(filename='scanner.log', level=logging.INFO)

class VulnerabilityScanner:
    def __init__(self, target):
        self.target = target
        self.open_ports = []
        self.wordlist = "common_dirs.txt"  # Change to your wordlist file

    def check_sql_injection(self):
        payload = "' OR '1'='1"
        response = requests.get(f"{self.target}/search?q={payload}")
        if "SQL syntax" in response.text:
            logging.info(f"SQL Injection Vulnerability Found at {self.target}")
            print(f"[+] SQL Injection Vulnerability Found at {self.target}")
        else:
            logging.info(f"No SQL Injection Vulnerability Found at {self.target}")
            print(f"[-] No SQL Injection Vulnerability Found at {self.target}")

    def check_xss(self):
        payload = "<script>alert('XSS')</script>"
        response = requests.get(f"{self.target}/?input={payload}")
        if payload in response.text:
            logging.info(f"XSS Vulnerability Found at {self.target}")
            print(f"[+] XSS Vulnerability Found at {self.target}")
        else:
            logging.info(f"No XSS Vulnerability Found at {self.target}")
            print(f"[-] No XSS Vulnerability Found at {self.target}")

    def scan_ports(self):
        threads = []
        for port in range(20, 1025):  # Scanning ports 20 to 1024
            thread = threading.Thread(target=self.check_port, args=(port,))
            threads.append(thread)
            thread.start()

        for thread in threads:
            thread.join()
        print(f"Open ports on {self.target}: {self.open_ports}")

    def check_port(self, port):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)  # Set a timeout for the connection
        result = sock.connect_ex((self.target, port))
        if result == 0:
            self.open_ports.append(port)
            logging.info(f"Open port found: {port} on {self.target}")
        sock.close()

    def check_ssl_vulnerabilities(self):
        try:
            context = ssl.create_default_context()
            connection = context.wrap_socket(socket.socket(socket.AF_INET), server_hostname=self.target)
            connection.connect((self.target, 443))
            cert = connection.getpeercert()
            logging.info(f"[+] SSL Certificate: {cert['subject']}")
            print(f"[+] SSL Certificate: {cert['subject']}")
            connection.close()
        except Exception as e:
            logging.error(f"SSL/TLS vulnerability check failed: {str(e)}")
            print(f"[-] SSL/TLS vulnerability check failed for {self.target}")

    def brute_force_login(self, url, usernames, passwords):
        for username in usernames:
            for password in passwords:
                response = requests.post(url, data={'username': username, 'password': password})
                if "Login successful" in response.text:
                    logging.info(f"[+] Valid credentials found: {username}:{password}")
                    print(f"[+] Valid credentials found: {username}:{password}")
                else:
                    logging.info(f"[-] Invalid credentials: {username}:{password}")

    def directory_scanning(self):
        with open(self.wordlist, 'r') as file:
            for line in file:
                directory = line.strip()
                response = requests.get(urljoin(self.target, directory))
                if response.status_code == 200:
                    logging.info(f"[+] Found: {urljoin(self.target, directory)}")
                    print(f"[+] Found: {urljoin(self.target, directory)}")

    def fuzz_api(self, endpoint):
        for _ in range(100):  # Send 100 random payloads
            payload = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz0123456789', k=10))
            response = requests.post(f"{self.target}/{endpoint}", data={'input': payload})
            if response.status_code != 200:
                print(f"[!] Fuzzing {endpoint} with payload '{payload}' resulted in status code: {response.status_code}")

    def run(self):
        print(f"Scanning {self.target} for vulnerabilities...")
        self.check_sql_injection()
        self.check_xss()
        self.scan_ports()
        self.check_ssl_vulnerabilities()
        
        # Brute Force Testing Example
        login_url = f"{self.target}/login"
        usernames = ["admin", "user"]
        passwords = ["password", "123456"]
        self.brute_force_login(login_url, usernames, passwords)
        
        # Directory Scanning
        self.directory_scanning()
        
        # Fuzzing API Endpoint
        api_endpoint = "api/test"  # Example API endpoint
        self.fuzz_api(api_endpoint)

if __name__ == "__main__":
    target = input("Enter the target URL or IP address: ")
    scanner = VulnerabilityScanner(target)
    scanner.run()
